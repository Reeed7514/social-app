// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  username     String  @unique
  name         String?
  password     String
  profileImage String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  // how do we find a user's tweets
  // look up the Tweet collection, find a tweet that has a userId that matches the id of current User

  following      User[]   @relation("follows", fields: [followingIds], references: [id])
  followingIds   String[] @db.ObjectId

  followers      User[]   @relation("follows", fields: [followerIds], references: [id])
  followerIds    String[] @db.ObjectId
  
  tweets        Tweet[]

  likedTweets    Tweet[]  @relation("likes", fields: [likedTweetsIds], references: [id])
  likedTweetsIds String[] @db.ObjectId

  bookmarks           Tweet[]  @relation("bookmarks", fields: [bookmarkedTweetsIds], references: [id])
  bookmarkedTweetsIds String[] @db.ObjectId

  mediaFiles MediaFile[]
}

model RefreshToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Tweet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId

  replyTo   Tweet?  @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String? @db.ObjectId
  // find all tweets that have a replyToId that matches the id of current Tweet
  replies   Tweet[] @relation("replies")

  quote        Tweet?  @relation("quotes", fields: [quoteTweetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quoteTweetId String? @db.ObjectId
  quotedBy     Tweet[] @relation("quotes")

  likedBy    User[]   @relation("likes", fields: [likedByIds], references: [id])
  likedByIds String[] @db.ObjectId

  bookmarkedBy    User[]   @relation("bookmarks", fields: [bookmarkedByIds], references: [id])
  bookmarkedByIds String[] @db.ObjectId

  // this is to disambiguate relations
  // ratioTo   Tweet?  @relation("ratios", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // ratioToId String? @db.ObjectId
  // ratios    Tweet[] @relation("ratios")

  // media files
  mediaFiles MediaFile[]
}

model MediaFile {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  // unique id from cloudinary
  providerPublicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  tweet   Tweet?  @relation(fields: [tweetId], references: [id])
  tweetId String? @db.ObjectId
}
